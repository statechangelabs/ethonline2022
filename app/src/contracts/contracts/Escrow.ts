/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Escrow {
  export type JobStruct = {
    amount: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
    arbiter: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    buyerAccepted: PromiseOrValue<boolean>;
    sellerAccepted: PromiseOrValue<boolean>;
    arbitrated: PromiseOrValue<boolean>;
    deliveryHeight: PromiseOrValue<BigNumberish>;
    dueHeight: PromiseOrValue<BigNumberish>;
    partialOffer: PromiseOrValue<BigNumberish>;
    partialOfferer: PromiseOrValue<string>;
  };

  export type JobStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    amount: BigNumber;
    buyer: string;
    seller: string;
    arbiter: string;
    status: number;
    buyerAccepted: boolean;
    sellerAccepted: boolean;
    arbitrated: boolean;
    deliveryHeight: BigNumber;
    dueHeight: BigNumber;
    partialOffer: BigNumber;
    partialOfferer: string;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "acceptBid(uint256)": FunctionFragment;
    "acceptBidFor(uint256,address,bytes)": FunctionFragment;
    "acceptOffer(uint256)": FunctionFragment;
    "acceptOfferFor(uint256,address,bytes)": FunctionFragment;
    "arbiterOpinionUris(uint256)": FunctionFragment;
    "arbitrate(uint256,uint256,string)": FunctionFragment;
    "arbitrateFor(uint256,uint256,string,address,bytes)": FunctionFragment;
    "assertDelivery(uint256)": FunctionFragment;
    "assertDeliveryFor(uint256,address,bytes)": FunctionFragment;
    "bid(uint256,address,address)": FunctionFragment;
    "bidFor(uint256,address,address,address,bytes)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "cancelFor(uint256,address,bytes)": FunctionFragment;
    "dispute(uint256)": FunctionFragment;
    "disputeFor(uint256,address,bytes)": FunctionFragment;
    "getJob(uint256)": FunctionFragment;
    "jobs(uint256)": FunctionFragment;
    "offer(uint256,address,address)": FunctionFragment;
    "offerFor(uint256,address,address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "partialCompletion(uint256,uint256)": FunctionFragment;
    "partialCompletionFor(uint256,uint256,address,bytes)": FunctionFragment;
    "partialOffer(uint256,uint256)": FunctionFragment;
    "partialOfferFor(uint256,uint256,address,bytes)": FunctionFragment;
    "receiveDelivery(uint256)": FunctionFragment;
    "recieveDeliveryFor(uint256,address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuyerRegistry(address)": FunctionFragment;
    "setSellerRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBid"
      | "acceptBidFor"
      | "acceptOffer"
      | "acceptOfferFor"
      | "arbiterOpinionUris"
      | "arbitrate"
      | "arbitrateFor"
      | "assertDelivery"
      | "assertDeliveryFor"
      | "bid"
      | "bidFor"
      | "cancel"
      | "cancelFor"
      | "dispute"
      | "disputeFor"
      | "getJob"
      | "jobs"
      | "offer"
      | "offerFor"
      | "owner"
      | "partialCompletion"
      | "partialCompletionFor"
      | "partialOffer"
      | "partialOfferFor"
      | "receiveDelivery"
      | "recieveDeliveryFor"
      | "renounceOwnership"
      | "setBuyerRegistry"
      | "setSellerRegistry"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBidFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOfferFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbiterOpinionUris",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrateFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertDelivery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertDeliveryFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "jobs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialCompletion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partialCompletionFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partialOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partialOfferFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveDelivery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recieveDeliveryFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyerRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptBidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOfferFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbiterOpinionUris",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitrateFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertDeliveryFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialCompletionFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialOfferFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recieveDeliveryFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Arbitrated(uint256,address,address)": EventFragment;
    "BidAccepted(uint256,address,address)": EventFragment;
    "BidCreated(uint256,address,address)": EventFragment;
    "Cancelled(uint256,address,address)": EventFragment;
    "Completed(uint256)": EventFragment;
    "Delivered(uint256,address)": EventFragment;
    "Disputed(uint256,address)": EventFragment;
    "OfferAccepted(uint256,address,address)": EventFragment;
    "OfferCreated(uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PartialCompletion(uint256,address,address,uint256)": EventFragment;
    "PartialOffered(uint256,address,address,uint256)": EventFragment;
    "Receipt(uint256,address)": EventFragment;
    "Refunded(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Arbitrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Disputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialCompletion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receipt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
}

export interface ArbitratedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type ArbitratedEvent = TypedEvent<
  [BigNumber, string, string],
  ArbitratedEventObject
>;

export type ArbitratedEventFilter = TypedEventFilter<ArbitratedEvent>;

export interface BidAcceptedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type BidAcceptedEvent = TypedEvent<
  [BigNumber, string, string],
  BidAcceptedEventObject
>;

export type BidAcceptedEventFilter = TypedEventFilter<BidAcceptedEvent>;

export interface BidCreatedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type BidCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  BidCreatedEventObject
>;

export type BidCreatedEventFilter = TypedEventFilter<BidCreatedEvent>;

export interface CancelledEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type CancelledEvent = TypedEvent<
  [BigNumber, string, string],
  CancelledEventObject
>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface CompletedEventObject {
  jobID: BigNumber;
}
export type CompletedEvent = TypedEvent<[BigNumber], CompletedEventObject>;

export type CompletedEventFilter = TypedEventFilter<CompletedEvent>;

export interface DeliveredEventObject {
  jobID: BigNumber;
  buyer: string;
}
export type DeliveredEvent = TypedEvent<
  [BigNumber, string],
  DeliveredEventObject
>;

export type DeliveredEventFilter = TypedEventFilter<DeliveredEvent>;

export interface DisputedEventObject {
  jobID: BigNumber;
  seller: string;
}
export type DisputedEvent = TypedEvent<
  [BigNumber, string],
  DisputedEventObject
>;

export type DisputedEventFilter = TypedEventFilter<DisputedEvent>;

export interface OfferAcceptedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, string, string],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCreatedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PartialCompletionEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
  amount: BigNumber;
}
export type PartialCompletionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PartialCompletionEventObject
>;

export type PartialCompletionEventFilter =
  TypedEventFilter<PartialCompletionEvent>;

export interface PartialOfferedEventObject {
  jobID: BigNumber;
  buyer: string;
  seller: string;
  amount: BigNumber;
}
export type PartialOfferedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PartialOfferedEventObject
>;

export type PartialOfferedEventFilter = TypedEventFilter<PartialOfferedEvent>;

export interface ReceiptEventObject {
  jobID: BigNumber;
  seller: string;
}
export type ReceiptEvent = TypedEvent<[BigNumber, string], ReceiptEventObject>;

export type ReceiptEventFilter = TypedEventFilter<ReceiptEvent>;

export interface RefundedEventObject {
  jobID: BigNumber;
  buyer: string;
}
export type RefundedEvent = TypedEvent<
  [BigNumber, string],
  RefundedEventObject
>;

export type RefundedEventFilter = TypedEventFilter<RefundedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBid(
      jobID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptBidFor(
      jobID: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOffer(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbiterOpinionUris(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    arbitrate(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitrateFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assertDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assertDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bid(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidFor(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelFor(
      jobId: PromiseOrValue<BigNumberish>,
      canceller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispute(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeFor(
      jobId: PromiseOrValue<BigNumberish>,
      disputor: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getJob(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Escrow.JobStructOutput]>;

    jobs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        number,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        amount: BigNumber;
        buyer: string;
        seller: string;
        arbiter: string;
        status: number;
        buyerAccepted: boolean;
        sellerAccepted: boolean;
        arbitrated: boolean;
        deliveryHeight: BigNumber;
        dueHeight: BigNumber;
        partialOffer: BigNumber;
        partialOfferer: string;
      }
    >;

    offer(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerFor(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partialCompletion(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partialCompletionFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partialOffer(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partialOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recieveDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyerRegistry(
      buyerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSellerRegistry(
      sellerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    jobID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptBidFor(
    jobID: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOffer(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOfferFor(
    jobId: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbiterOpinionUris(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  arbitrate(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    opinionURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitrateFor(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    opinionURI: PromiseOrValue<string>,
    arbiter: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assertDelivery(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assertDeliveryFor(
    jobId: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bid(
    amount: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    arbiter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidFor(
    amount: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    arbiter: PromiseOrValue<string>,
    buyer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelFor(
    jobId: PromiseOrValue<BigNumberish>,
    canceller: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispute(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeFor(
    jobId: PromiseOrValue<BigNumberish>,
    disputor: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getJob(
    _jobId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Escrow.JobStructOutput>;

  jobs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      number,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      amount: BigNumber;
      buyer: string;
      seller: string;
      arbiter: string;
      status: number;
      buyerAccepted: boolean;
      sellerAccepted: boolean;
      arbitrated: boolean;
      deliveryHeight: BigNumber;
      dueHeight: BigNumber;
      partialOffer: BigNumber;
      partialOfferer: string;
    }
  >;

  offer(
    amount: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    arbiter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerFor(
    amount: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    arbiter: PromiseOrValue<string>,
    seller: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  partialCompletion(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partialCompletionFor(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partialOffer(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partialOfferFor(
    jobId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveDelivery(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recieveDeliveryFor(
    jobId: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyerRegistry(
    buyerRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSellerRegistry(
    sellerRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      jobID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBidFor(
      jobID: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOffer(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbiterOpinionUris(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    arbitrate(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrateFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    assertDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    assertDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bid(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidFor(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelFor(
      jobId: PromiseOrValue<BigNumberish>,
      canceller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dispute(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeFor(
      jobId: PromiseOrValue<BigNumberish>,
      disputor: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getJob(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Escrow.JobStructOutput>;

    jobs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        number,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        amount: BigNumber;
        buyer: string;
        seller: string;
        arbiter: string;
        status: number;
        buyerAccepted: boolean;
        sellerAccepted: boolean;
        arbitrated: boolean;
        deliveryHeight: BigNumber;
        dueHeight: BigNumber;
        partialOffer: BigNumber;
        partialOfferer: string;
      }
    >;

    offer(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    offerFor(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    partialCompletion(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    partialCompletionFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    partialOffer(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    partialOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recieveDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBuyerRegistry(
      buyerRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellerRegistry(
      sellerRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Arbitrated(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): ArbitratedEventFilter;
    Arbitrated(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): ArbitratedEventFilter;

    "BidAccepted(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): BidAcceptedEventFilter;
    BidAccepted(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): BidAcceptedEventFilter;

    "BidCreated(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): BidCreatedEventFilter;
    BidCreated(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): BidCreatedEventFilter;

    "Cancelled(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): CancelledEventFilter;

    "Completed(uint256)"(
      jobID?: PromiseOrValue<BigNumberish> | null
    ): CompletedEventFilter;
    Completed(
      jobID?: PromiseOrValue<BigNumberish> | null
    ): CompletedEventFilter;

    "Delivered(uint256,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): DeliveredEventFilter;
    Delivered(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): DeliveredEventFilter;

    "Disputed(uint256,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): DisputedEventFilter;
    Disputed(
      jobID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): DisputedEventFilter;

    "OfferAccepted(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): OfferAcceptedEventFilter;

    "OfferCreated(uint256,address,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): OfferCreatedEventFilter;
    OfferCreated(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null
    ): OfferCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PartialCompletion(uint256,address,address,uint256)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): PartialCompletionEventFilter;
    PartialCompletion(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): PartialCompletionEventFilter;

    "PartialOffered(uint256,address,address,uint256)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): PartialOfferedEventFilter;
    PartialOffered(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): PartialOfferedEventFilter;

    "Receipt(uint256,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): ReceiptEventFilter;
    Receipt(
      jobID?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): ReceiptEventFilter;

    "Refunded(uint256,address)"(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): RefundedEventFilter;
    Refunded(
      jobID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): RefundedEventFilter;
  };

  estimateGas: {
    acceptBid(
      jobID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptBidFor(
      jobID: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOffer(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbiterOpinionUris(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrate(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitrateFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assertDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assertDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bid(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidFor(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelFor(
      jobId: PromiseOrValue<BigNumberish>,
      canceller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispute(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeFor(
      jobId: PromiseOrValue<BigNumberish>,
      disputor: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getJob(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offer(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerFor(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partialCompletion(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partialCompletionFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partialOffer(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partialOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recieveDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyerRegistry(
      buyerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSellerRegistry(
      sellerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      jobID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptBidFor(
      jobID: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbiterOpinionUris(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrate(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitrateFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      opinionURI: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assertDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assertDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bid(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidFor(
      amount: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelFor(
      jobId: PromiseOrValue<BigNumberish>,
      canceller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispute(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeFor(
      jobId: PromiseOrValue<BigNumberish>,
      disputor: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getJob(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offer(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerFor(
      amount: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      arbiter: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialCompletion(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partialCompletionFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partialOffer(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partialOfferFor(
      jobId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recieveDeliveryFor(
      jobId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyerRegistry(
      buyerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSellerRegistry(
      sellerRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
