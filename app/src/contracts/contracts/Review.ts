/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ReviewInterface extends utils.Interface {
  functions: {
    "escrow()": FunctionFragment;
    "jobReviews(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reviewArbiter(uint256,uint8,string)": FunctionFragment;
    "reviewArbiterFor(uint256,uint8,string,address,bytes)": FunctionFragment;
    "reviewBuyer(uint256,uint8,string)": FunctionFragment;
    "reviewBuyerFor(uint256,uint8,string,address,bytes)": FunctionFragment;
    "reviewSeller(uint256,uint8,string)": FunctionFragment;
    "reviewSellerFor(uint256,uint8,string,address,bytes)": FunctionFragment;
    "setEscrow(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "escrow"
      | "jobReviews"
      | "owner"
      | "renounceOwnership"
      | "reviewArbiter"
      | "reviewArbiterFor"
      | "reviewBuyer"
      | "reviewBuyerFor"
      | "reviewSeller"
      | "reviewSellerFor"
      | "setEscrow"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jobReviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewArbiter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewArbiterFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewBuyer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewBuyerFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewSeller",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewSellerFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEscrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobReviews", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewArbiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewArbiterFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewBuyerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewSellerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Reviewed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reviewed"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReviewedEventObject {
  jobID: BigNumber;
}
export type ReviewedEvent = TypedEvent<[BigNumber], ReviewedEventObject>;

export type ReviewedEventFilter = TypedEventFilter<ReviewedEvent>;

export interface Review extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReviewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    escrow(overrides?: CallOverrides): Promise<[string]>;

    jobReviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string, string, string, string] & {
        buyerScore: number;
        sellerScore: number;
        arbiterBuyerScore: number;
        arbiterSellerScore: number;
        sellerReviewUri: string;
        buyerReviewUri: string;
        arbiterReviewByBuyerUri: string;
        arbiterReviewBySellerUri: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewArbiter(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewArbiterFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      reviewer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewBuyer(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewBuyerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewSeller(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewSellerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEscrow(
      newEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  escrow(overrides?: CallOverrides): Promise<string>;

  jobReviews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string, string, string, string] & {
      buyerScore: number;
      sellerScore: number;
      arbiterBuyerScore: number;
      arbiterSellerScore: number;
      sellerReviewUri: string;
      buyerReviewUri: string;
      arbiterReviewByBuyerUri: string;
      arbiterReviewBySellerUri: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewArbiter(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewArbiterFor(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    reviewer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewBuyer(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewBuyerFor(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    seller: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewSeller(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewSellerFor(
    jobId: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    reviewURI: PromiseOrValue<string>,
    buyer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEscrow(
    newEscrow: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    escrow(overrides?: CallOverrides): Promise<string>;

    jobReviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string, string, string, string] & {
        buyerScore: number;
        sellerScore: number;
        arbiterBuyerScore: number;
        arbiterSellerScore: number;
        sellerReviewUri: string;
        buyerReviewUri: string;
        arbiterReviewByBuyerUri: string;
        arbiterReviewBySellerUri: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reviewArbiter(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewArbiterFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      reviewer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewBuyer(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewBuyerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewSeller(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewSellerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEscrow(
      newEscrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Reviewed(uint256)"(
      jobID?: PromiseOrValue<BigNumberish> | null
    ): ReviewedEventFilter;
    Reviewed(jobID?: PromiseOrValue<BigNumberish> | null): ReviewedEventFilter;
  };

  estimateGas: {
    escrow(overrides?: CallOverrides): Promise<BigNumber>;

    jobReviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewArbiter(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewArbiterFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      reviewer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewBuyer(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewBuyerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewSeller(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewSellerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEscrow(
      newEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobReviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewArbiter(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewArbiterFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      reviewer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewBuyer(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewBuyerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewSeller(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewSellerFor(
      jobId: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      reviewURI: PromiseOrValue<string>,
      buyer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEscrow(
      newEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
